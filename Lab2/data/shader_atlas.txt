//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
multi_pass basic.vs light_multi_pass.fs
single_pass basic.vs light_single_pass.fs
gbuffers basic.vs gbuffers.fs
deferred quad.vs deferred.fs
depth quad.vs depth.fs
multi basic.vs multi.fs
//------------------------------------------------------------------
\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}
//------------------------------------------------------------------
\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}

//-------------------------------------------------------------
\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}

//------------------------------------------------------------
\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}

// ESTOS SHADERS KILOMETRICOS SON HORRIBLES, HABRÍA QUE HACER LO DE #INCLUDE 
//PARA REUTILIZAR FUNCIONES DESDE OTRO SHADER
//------------------------------------------------------------------------------------------------------------------------------
\light_single_pass.fs
#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform vec3 u_camera_position;

// Textures
uniform sampler2D u_texture;
uniform int u_normal_text_bool;
uniform sampler2D u_normal_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_occlusion_texture;
uniform sampler2D u_met_rough_texture;
uniform int u_texture2show;

// Light parameters
uniform vec3 u_ambient_light;

#define MAX_LIGHTS 10
uniform int u_lights_type[MAX_LIGHTS];
uniform vec3 u_lights_position[MAX_LIGHTS];
uniform vec3 u_lights_color[MAX_LIGHTS];
uniform float u_lights_max_distance[MAX_LIGHTS];
uniform vec3 u_lights_direction[MAX_LIGHTS];
uniform float u_lights_cone_cos[MAX_LIGHTS];
uniform float u_lights_cone_exp[MAX_LIGHTS];

uniform int u_lights_cast_shadows[MAX_LIGHTS];
uniform sampler2D u_lights_shadowmap[MAX_LIGHTS];
uniform mat4 u_lights_shadowmap_vpm[MAX_LIGHTS];
uniform float u_lights_shadow_bias[MAX_LIGHTS];

out vec4 FragColor;

// Save computations related to light
struct LightStruct{
	vec3 L;
	vec3 D;
	vec3 N;

	float NdotL;
	float LdotD;
	float light_dist;

	float spot_factor;
	float att_factor;
	float shadow_factor;
}LightComp;

// --- Functions ---
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

// L vector for point and spot lights
void computeL_point(inout LightStruct lc, int i){
	// Distance from current point to light
	vec3 L = u_lights_position[i] - v_world_position;
	// Modulus			
	lc.light_dist = length(L);
	// Normalize L
	lc.L = L/lc.light_dist;
}

// L vector for directional light
void computeL_directional(inout LightStruct lc, int i){
	// All points take the same light direction
	vec3 L = u_lights_direction[i];
	lc.light_dist = length(L);
	lc.L = L/lc.light_dist;
}

void computeNdotL(inout LightStruct lc){
	vec3 V = normalize(u_camera_position - v_world_position);
	vec3 normal_pixel = texture2D( u_normal_texture, v_uv ).xyz; 
	vec3 N = normalize(v_normal);
	// if there is a normal texture, compute the normal according to it
	if (u_normal_text_bool == 1)
		lc.N = perturbNormal(N, V, v_uv, normal_pixel);
	else
		lc.N = N;

	lc.NdotL = clamp(dot(lc.L,lc.N), 0.0, 1.0);
}

void computeSpotFactor(inout LightStruct lc, int i){
	lc.D = normalize(u_lights_direction[i]);
	lc.LdotD = dot(-lc.L, lc.D);
	// check if point inside the spotlight
	if (lc.LdotD >= u_lights_cone_cos[i]){
		// compute how much it is inside
		lc.spot_factor = pow(lc.LdotD, u_lights_cone_exp[i]);	
	}
	else{
		lc.spot_factor = 0.0;
	}	
}

void computeAttenuation(inout LightStruct lc, int i){
	float att_factor = u_lights_max_distance[i] - lc.light_dist;
	att_factor /= u_lights_max_distance[i];
	att_factor = max(att_factor, 0.0);
	// apply quadratic attenuation
	lc.att_factor = pow(att_factor,2);
}

void testShadowMap(inout LightStruct lc, int i){
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_lights_shadowmap_vpm[i] * vec4(v_world_position,1.0);
	
	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;
	
	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);
		
	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (proj_pos.z - u_lights_shadow_bias[i]) / 
	proj_pos.w;
	
	//normalize from [-1..+1] to [0..+1] still non-linear
	real_depth = real_depth * 0.5 + 0.5;
	
	//read depth from depth buffer in [0..+1] non-linear
	float shadow_depth = texture( u_lights_shadowmap[i], shadow_uv).x;
	
	//compute final shadow factor by comparing
	lc.shadow_factor = 1.0;
	
	//we can compare them, even if they are not linear
	if( shadow_depth < real_depth )
		lc.shadow_factor = 0.0;
		
	//We must see if it is outside the sides
	if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 ||shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
		lc.shadow_factor = 1.0;

	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0)
		lc.shadow_factor = 1.0;
}

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(u_ambient_light);

	// Iterate lights
	for (int i = 0; i < MAX_LIGHTS; i++) {
		LightComp = LightStruct(
			vec3(0.0, 0.0, 0.0), //L
			vec3(0.0, 0.0, 0.0), //D
			vec3(0.0, 0.0, 0.0), //N

			0.0, // NdotL
			0.0, // LdotD
			0.0, // light dist

			1.0, // spot factor
			1.0, // attenuation factor
			1.0 // shadow_factor
		);
		// Point
		if (u_lights_type[i] == 1){
			computeL_point(LightComp, i);
		}

		// Spot
		else if (u_lights_type[i] == 2){
			computeL_point(LightComp, i);
			computeSpotFactor(LightComp, i);
		}

		// Directional
		else if (u_lights_type[i] == 3){
			computeL_directional(LightComp, i);
		}

// didn't make it to pass multiple textures to the shader so shadowmaps are not working for singlepass
//	if (u_lights_cast_shadows[i] == 1){
//		testShadowMap(LightComp, i);
//	}

		computeNdotL(LightComp);
		computeAttenuation(LightComp, i);
		light += u_lights_color[i] * LightComp.NdotL * LightComp.att_factor * LightComp.spot_factor * LightComp.shadow_factor;
	}

	// Apply other textures
	// Emissive
	light += texture( u_emissive_texture, v_uv ).xyz;

	// Occlusion
	// x coord has occlusion map
	light *= texture( u_met_rough_texture, v_uv ).x;
	// Occlusion can be either in the met_rou or occlusion texture
	light *= texture( u_occlusion_texture, v_uv ).x;

	color.xyz *= light;

	// Debug textures
	// Normal
	if (u_texture2show == 1){
		color.xyz = LightComp.N;
	}

	// Occlusion
	if(u_texture2show == 2){
		color.xyz = vec3(texture( u_met_rough_texture, v_uv ).x);
		color.xyz *= texture(u_occlusion_texture, v_uv).x;
	}
	// Emissive
	if(u_texture2show == 3)
		color.xyz = texture(u_emissive_texture, v_uv).xyz;

	FragColor = color;
}

//----------------------------------------------------------------------------------------------------------------------------
\light_multi_pass.fs
#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec3 u_camera_position;
uniform vec4 u_color;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform sampler2D u_texture;
uniform int u_normal_text_bool;
uniform sampler2D u_normal_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_occlusion_texture;
uniform sampler2D u_met_rough_texture;
uniform int u_texture2show;

// Light parameters
uniform vec3 u_ambient_light;

// Textures
uniform int u_light_type;
uniform vec3 u_light_position;
uniform vec3 u_light_color;
uniform float u_light_max_distance;
uniform vec3 u_light_direction;
uniform float u_light_cone_cos;
uniform float u_light_cone_exp;

uniform int u_light_cast_shadows;
uniform sampler2D u_light_shadowmap;
uniform mat4 u_light_shadowmap_vpm;
uniform float u_light_shadow_bias;

out vec4 FragColor;

// Save computations related to light
struct LightStruct{
	vec3 L;
	vec3 D;
	vec3 N;

	float NdotL;
	float LdotD;
	float light_dist;

	float spot_factor;
	float att_factor;
	float shadow_factor;
}LightComp;

// --- Functions ---
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

// L vector for point and spot lights
void computeL_point(inout LightStruct lc){
	// Distance from current point to light
	vec3 L = u_light_position - v_world_position;
	// Modulus			
	lc.light_dist = length(L);
	// Normalize L
	lc.L = L/lc.light_dist;
}

// L vector for directional light
void computeL_directional(inout LightStruct lc){
	// All points take the same light direction
	vec3 L = u_light_direction;
	lc.light_dist = length(L);
	lc.L = L/lc.light_dist;
}

void computeNdotL(inout LightStruct lc){
	vec3 V = normalize(u_camera_position - v_world_position);
	vec3 normal_pixel = texture2D( u_normal_texture, v_uv ).xyz; 
	vec3 N = normalize(v_normal);
	// if there is a normal texture, compute the normal according to it
	if (u_normal_text_bool == 1)
		lc.N = perturbNormal(N, V, v_uv, normal_pixel);
	else
		lc.N = N;

	lc.NdotL = clamp(dot(lc.L,lc.N), 0.0, 1.0);
}

void computeSpotFactor(inout LightStruct lc){
	lc.D = normalize(u_light_direction);
	lc.LdotD = dot(-lc.L, lc.D);
	// check if point inside the spotlight
	if (lc.LdotD >= u_light_cone_cos){
		// compute how much it is inside
		lc.spot_factor = pow(lc.LdotD, u_light_cone_exp);	
	}
	else{
		lc.spot_factor = 0.0;
	}	
}

void computeAttenuation(inout LightStruct lc){
	float att_factor = u_light_max_distance - lc.light_dist;
	att_factor /= u_light_max_distance;
	att_factor = max(att_factor, 0.0);
	// apply quadratic attenuation
	lc.att_factor = pow(att_factor,2);
}

void testShadowMap(inout LightStruct lc, vec3 pos){
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_light_shadowmap_vpm * vec4(pos,1.0);
	
	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;
	
	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);
		
	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (proj_pos.z - u_light_shadow_bias) / 
	proj_pos.w;
	
	//normalize from [-1..+1] to [0..+1] still non-linear
	real_depth = real_depth * 0.5 + 0.5;
	
	//read depth from depth buffer in [0..+1] non-linear
	float shadow_depth = texture( u_light_shadowmap, shadow_uv).x;
	
	//compute final shadow factor by comparing
	lc.shadow_factor = 1.0;
	
	//we can compare them, even if they are not linear
	if( shadow_depth < real_depth )
		lc.shadow_factor = 0.0;
		
	//We must see if it is outside the sides
	if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 ||shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
		lc.shadow_factor = 1.0;

	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0)
		lc.shadow_factor = 1.0;
}

void main()
{
	LightComp = LightStruct(
		vec3(0.0, 0.0, 0.0), //L
		vec3(0.0, 0.0, 0.0), //D
		vec3(0.0, 0.0, 0.0), //N

		0.0, // NdotL
		0.0, // LdotD
		0.0, // light dist

		1.0, // spot factor
		1.0, // attenuation factor
		1.0 // shadow_factor
	);

	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(u_ambient_light);

	// Point
	if (u_light_type == 1){
		computeL_point(LightComp);
	}

	// Spot
	else if (u_light_type == 2){
		computeL_point(LightComp);
		computeSpotFactor(LightComp);
	}

	// Directional
	else if (u_light_type == 3){
		computeL_directional(LightComp);
	}

	computeNdotL(LightComp);

	if (u_light_cast_shadows == 1){
		testShadowMap(LightComp, v_world_position);
	}
	computeAttenuation(LightComp);
	light += u_light_color * LightComp.NdotL * LightComp.att_factor * LightComp.spot_factor * LightComp.shadow_factor;

	// Apply other textures
	// Emissive
	light += texture( u_emissive_texture, v_uv ).xyz;

	// Occlusion
	// x coord has occlusion map
	light *= texture( u_met_rough_texture, v_uv ).x;
	// Occlusion can be either in the met_rou or occlusion texture
	light *= texture( u_occlusion_texture, v_uv ).x;

	color.xyz *= light;

	// Debug textures
	// Normal
	if (u_texture2show == 1){
		color.xyz = LightComp.N;
	}

	// Occlusion
	if(u_texture2show == 2){
		color.xyz = vec3(texture( u_met_rough_texture, v_uv ).x);
		color.xyz *= texture(u_occlusion_texture, v_uv).x;
	}
	// Emissive
	if(u_texture2show == 3)
		color.xyz = texture(u_emissive_texture, v_uv).xyz;

	FragColor = color;
}

// -----------------------------------------------------------
\gbuffers.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec3 u_camera_position;
uniform vec4 u_color;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform sampler2D u_texture;
uniform int u_normal_text_bool;
uniform sampler2D u_normal_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_occlusion_texture;
uniform sampler2D u_met_rough_texture;
uniform int u_texture2show;

// gbuffers out
layout(location = 0) out vec4 GB0;
layout(location = 1) out vec4 GB1;
layout(location = 2) out vec4 GB2;


// --- Functions ---
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N;
	vec3 V = normalize(u_camera_position - v_world_position);
	vec3 normal_pixel = texture2D( u_normal_texture, v_uv ).xyz; 
	vec3 v_N = normalize(v_normal);
	// if there is a normal texture, compute the normal according to it
	if (u_normal_text_bool == 1)
		N = perturbNormal(v_N, V, v_uv, normal_pixel);
	else
		N = v_N;


	// Apply other textures
	// Emissive
	//light += texture( u_emissive_texture, v_uv ).xyz;

	// Occlusion
	// x coord has occlusion map
	//light *= texture( u_met_rough_texture, v_uv ).x;
	// Occlusion can be either in the met_rou or occlusion texture
	//light *= texture( u_occlusion_texture, v_uv ).x;

	// Debug textures
	// Normal
	//if (u_texture2show == 1){
	//	color.xyz = LightComp.N;
	//}

	// Occlusion
	//if(u_texture2show == 2){
	//	color.xyz = vec3(texture( u_met_rough_texture, v_uv ).x);
	//	color.xyz *= texture(u_occlusion_texture, v_uv).x;
	//}
	// Emissive
	//if(u_texture2show == 3)
	//	color.xyz = texture(u_emissive_texture, v_uv).xyz;

	// don't need to save the alpha
	GB0 = vec4(color.xyz, 1.0);
	// ESTARIA BIEN ARREGLAR ESTO TAMBIÉN EN MULTI Y SINGLE PASS FORWARD
	// to recover negative values
	GB1 = vec4(N * 0.5 + vec3(0.5), 1.0);
	// to make the world position go from 0 to 100 and visualize it better
	GB2 = vec4(v_world_position * 0.01, 1.0);

}

//------------------------------------------------------------
\deferred.fs
#version 330 core

in vec2 v_uv;

uniform vec3 u_camera_position;
uniform vec4 u_color;
uniform float u_time;
uniform float u_alpha_cutoff;

// YA NO TENEMOS TEXTURAS DEL MATERIAL -- AHORA TENEMOS LAS TEXTURAS DEL GBUFFER
uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_gb2_texture;
uniform sampler2D u_depth_texture;
//uniform int u_normal_text_bool;
uniform int u_texture2show;

uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;

// Light parameters
uniform vec3 u_ambient_light;

// Textures
uniform int u_light_type;
uniform vec3 u_light_position;
uniform vec3 u_light_color;
uniform float u_light_max_distance;
uniform vec3 u_light_direction;
uniform float u_light_cone_cos;
uniform float u_light_cone_exp;

uniform int u_light_cast_shadows;
uniform sampler2D u_light_shadowmap;
uniform mat4 u_light_shadowmap_vpm;
uniform float u_light_shadow_bias;

out vec4 FragColor;

// Save computations related to light
struct LightStruct{
	vec3 L;
	vec3 D;
	vec3 N;

	float NdotL;
	float LdotD;
	float light_dist;

	float spot_factor;
	float att_factor;
	float shadow_factor;
}LightComp;

// --- Functions ---

// L vector for point and spot lights
void computeL_point(inout LightStruct lc){
	// Distance from current point to light
	vec3 L = u_light_position - v_world_position;
	// Modulus			
	lc.light_dist = length(L);
	// Normalize L
	lc.L = L/lc.light_dist;
}

// L vector for directional light
void computeL_directional(inout LightStruct lc){
	// All points take the same light direction
	vec3 L = u_light_direction;
	lc.light_dist = length(L);
	lc.L = L/lc.light_dist;
}

void computeNdotL(inout LightStruct lc){
	lc.NdotL = clamp(dot(lc.L,lc.N), 0.0, 1.0);
}

void computeSpotFactor(inout LightStruct lc){
	lc.D = normalize(u_light_direction);
	lc.LdotD = dot(-lc.L, lc.D);
	// check if point inside the spotlight
	if (lc.LdotD >= u_light_cone_cos){
		// compute how much it is inside
		lc.spot_factor = pow(lc.LdotD, u_light_cone_exp);	
	}
	else{
		lc.spot_factor = 0.0;
	}	
}

void computeAttenuation(inout LightStruct lc){
	float att_factor = u_light_max_distance - lc.light_dist;
	att_factor /= u_light_max_distance;
	att_factor = max(att_factor, 0.0);
	// apply quadratic attenuation
	lc.att_factor = pow(att_factor,2);
}

void testShadowMap(inout LightStruct lc, vec3 pos){
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_light_shadowmap_vpm * vec4(pos,1.0);
	
	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;
	
	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);
		
	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (proj_pos.z - u_light_shadow_bias) / 
	proj_pos.w;
	
	//normalize from [-1..+1] to [0..+1] still non-linear
	real_depth = real_depth * 0.5 + 0.5;
	
	//read depth from depth buffer in [0..+1] non-linear
	float shadow_depth = texture( u_light_shadowmap, shadow_uv).x;
	
	//compute final shadow factor by comparing
	lc.shadow_factor = 1.0;
	
	//we can compare them, even if they are not linear
	if( shadow_depth < real_depth )
		lc.shadow_factor = 0.0;
		
	//We must see if it is outside the sides
	if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 ||shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
		lc.shadow_factor = 1.0;

	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0)
		lc.shadow_factor = 1.0;
}

void main()
{
	LightComp = LightStruct(
		vec3(0.0, 0.0, 0.0), //L
		vec3(0.0, 0.0, 0.0), //D
		vec3(0.0, 0.0, 0.0), //N

		0.0, // NdotL
		0.0, // LdotD
		0.0, // light dist

		1.0, // spot factor
		1.0, // attenuation factor
		1.0 // shadow_factor
	);

	// POT SER QUE L'ORDRE DELS GB NO SIGUI CORRECTE, NO ESTIC SEGURA
	vec4 gb0_color = texture(u_gb0_texture, v_uv);
	vec4 gb1_color = texture(u_gb1_texture, v_uv);
	vec4 gb2_color = texture(u_gb2_texture, v_uv);

	vec2 uv = v_uv;
	float depth = texture( u_depth_texture, uv ).x;
	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;

	LightComp.N = normalize(gb1_color.xyz * 2.0 - vec3(1.0)); // PASAMOS DE [0, 1] A [-1, 1]

	vec4 color = vec4(gb0_color.xyz, 1.0);

	vec3 light = vec3(u_ambient_light);

	// Point
	if (u_light_type == 1){
		computeL_point(LightComp);
	}

	// Spot
	else if (u_light_type == 2){
		computeL_point(LightComp);
		computeSpotFactor(LightComp);
	}

	// Directional
	else if (u_light_type == 3){
		computeL_directional(LightComp);
	}

	computeNdotL(LightComp);

	if (u_light_cast_shadows == 1){
		testShadowMap(LightComp, v_world_position);
	}
	computeAttenuation(LightComp);
	light += u_light_color * LightComp.NdotL * LightComp.att_factor * LightComp.spot_factor * LightComp.shadow_factor;

	// Apply other textures
	// Emissive
	// light += texture( u_emissive_texture, v_uv ).xyz;

	// Occlusion
	// x coord has occlusion map
	// light *= texture( u_met_rough_texture, v_uv ).x;
	// Occlusion can be either in the met_rou or occlusion texture
	// light *= texture( u_occlusion_texture, v_uv ).x;

	color.xyz *= light;

	FragColor = color;
}



//------------------------------------------------------------
\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}